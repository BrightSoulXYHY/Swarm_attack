// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MavData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MAVDATA_H_
#define _MAVDATA_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MavData_SOURCE)
#define MavData_DllAPI __declspec( dllexport )
#else
#define MavData_DllAPI __declspec( dllimport )
#endif // MavData_SOURCE
#else
#define MavData_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MavData_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MavData defined by the user in the IDL file.
 * @ingroup MAVDATA
 */
class MavData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MavData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MavData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MavData that will be copied.
     */
    eProsima_user_DllExport MavData(
            const MavData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MavData that will be copied.
     */
    eProsima_user_DllExport MavData(
            MavData&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MavData that will be copied.
     */
    eProsima_user_DllExport MavData& operator =(
            const MavData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MavData that will be copied.
     */
    eProsima_user_DllExport MavData& operator =(
            MavData&& x);

    /*!
     * @brief This function sets a value in member system_ID
     * @param _system_ID New value for member system_ID
     */
    eProsima_user_DllExport void system_ID(
            int16_t _system_ID);

    /*!
     * @brief This function returns the value of member system_ID
     * @return Value of member system_ID
     */
    eProsima_user_DllExport int16_t system_ID() const;

    /*!
     * @brief This function returns a reference to member system_ID
     * @return Reference to member system_ID
     */
    eProsima_user_DllExport int16_t& system_ID();

    /*!
     * @brief This function sets a value in member pose_x
     * @param _pose_x New value for member pose_x
     */
    eProsima_user_DllExport void pose_x(
            float _pose_x);

    /*!
     * @brief This function returns the value of member pose_x
     * @return Value of member pose_x
     */
    eProsima_user_DllExport float pose_x() const;

    /*!
     * @brief This function returns a reference to member pose_x
     * @return Reference to member pose_x
     */
    eProsima_user_DllExport float& pose_x();

    /*!
     * @brief This function sets a value in member pose_y
     * @param _pose_y New value for member pose_y
     */
    eProsima_user_DllExport void pose_y(
            float _pose_y);

    /*!
     * @brief This function returns the value of member pose_y
     * @return Value of member pose_y
     */
    eProsima_user_DllExport float pose_y() const;

    /*!
     * @brief This function returns a reference to member pose_y
     * @return Reference to member pose_y
     */
    eProsima_user_DllExport float& pose_y();

    /*!
     * @brief This function sets a value in member pose_z
     * @param _pose_z New value for member pose_z
     */
    eProsima_user_DllExport void pose_z(
            float _pose_z);

    /*!
     * @brief This function returns the value of member pose_z
     * @return Value of member pose_z
     */
    eProsima_user_DllExport float pose_z() const;

    /*!
     * @brief This function returns a reference to member pose_z
     * @return Reference to member pose_z
     */
    eProsima_user_DllExport float& pose_z();

    /*!
     * @brief This function sets a value in member quat_w
     * @param _quat_w New value for member quat_w
     */
    eProsima_user_DllExport void quat_w(
            float _quat_w);

    /*!
     * @brief This function returns the value of member quat_w
     * @return Value of member quat_w
     */
    eProsima_user_DllExport float quat_w() const;

    /*!
     * @brief This function returns a reference to member quat_w
     * @return Reference to member quat_w
     */
    eProsima_user_DllExport float& quat_w();

    /*!
     * @brief This function sets a value in member quat_x
     * @param _quat_x New value for member quat_x
     */
    eProsima_user_DllExport void quat_x(
            float _quat_x);

    /*!
     * @brief This function returns the value of member quat_x
     * @return Value of member quat_x
     */
    eProsima_user_DllExport float quat_x() const;

    /*!
     * @brief This function returns a reference to member quat_x
     * @return Reference to member quat_x
     */
    eProsima_user_DllExport float& quat_x();

    /*!
     * @brief This function sets a value in member quat_y
     * @param _quat_y New value for member quat_y
     */
    eProsima_user_DllExport void quat_y(
            float _quat_y);

    /*!
     * @brief This function returns the value of member quat_y
     * @return Value of member quat_y
     */
    eProsima_user_DllExport float quat_y() const;

    /*!
     * @brief This function returns a reference to member quat_y
     * @return Reference to member quat_y
     */
    eProsima_user_DllExport float& quat_y();

    /*!
     * @brief This function sets a value in member quat_z
     * @param _quat_z New value for member quat_z
     */
    eProsima_user_DllExport void quat_z(
            float _quat_z);

    /*!
     * @brief This function returns the value of member quat_z
     * @return Value of member quat_z
     */
    eProsima_user_DllExport float quat_z() const;

    /*!
     * @brief This function returns a reference to member quat_z
     * @return Reference to member quat_z
     */
    eProsima_user_DllExport float& quat_z();

    /*!
     * @brief This function sets a value in member vel_x
     * @param _vel_x New value for member vel_x
     */
    eProsima_user_DllExport void vel_x(
            float _vel_x);

    /*!
     * @brief This function returns the value of member vel_x
     * @return Value of member vel_x
     */
    eProsima_user_DllExport float vel_x() const;

    /*!
     * @brief This function returns a reference to member vel_x
     * @return Reference to member vel_x
     */
    eProsima_user_DllExport float& vel_x();

    /*!
     * @brief This function sets a value in member vel_y
     * @param _vel_y New value for member vel_y
     */
    eProsima_user_DllExport void vel_y(
            float _vel_y);

    /*!
     * @brief This function returns the value of member vel_y
     * @return Value of member vel_y
     */
    eProsima_user_DllExport float vel_y() const;

    /*!
     * @brief This function returns a reference to member vel_y
     * @return Reference to member vel_y
     */
    eProsima_user_DllExport float& vel_y();

    /*!
     * @brief This function sets a value in member vel_z
     * @param _vel_z New value for member vel_z
     */
    eProsima_user_DllExport void vel_z(
            float _vel_z);

    /*!
     * @brief This function returns the value of member vel_z
     * @return Value of member vel_z
     */
    eProsima_user_DllExport float vel_z() const;

    /*!
     * @brief This function returns a reference to member vel_z
     * @return Reference to member vel_z
     */
    eProsima_user_DllExport float& vel_z();

    /*!
     * @brief This function sets a value in member ang_x
     * @param _ang_x New value for member ang_x
     */
    eProsima_user_DllExport void ang_x(
            float _ang_x);

    /*!
     * @brief This function returns the value of member ang_x
     * @return Value of member ang_x
     */
    eProsima_user_DllExport float ang_x() const;

    /*!
     * @brief This function returns a reference to member ang_x
     * @return Reference to member ang_x
     */
    eProsima_user_DllExport float& ang_x();

    /*!
     * @brief This function sets a value in member ang_y
     * @param _ang_y New value for member ang_y
     */
    eProsima_user_DllExport void ang_y(
            float _ang_y);

    /*!
     * @brief This function returns the value of member ang_y
     * @return Value of member ang_y
     */
    eProsima_user_DllExport float ang_y() const;

    /*!
     * @brief This function returns a reference to member ang_y
     * @return Reference to member ang_y
     */
    eProsima_user_DllExport float& ang_y();

    /*!
     * @brief This function sets a value in member ang_z
     * @param _ang_z New value for member ang_z
     */
    eProsima_user_DllExport void ang_z(
            float _ang_z);

    /*!
     * @brief This function returns the value of member ang_z
     * @return Value of member ang_z
     */
    eProsima_user_DllExport float ang_z() const;

    /*!
     * @brief This function returns a reference to member ang_z
     * @return Reference to member ang_z
     */
    eProsima_user_DllExport float& ang_z();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MavData& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_system_ID;
    float m_pose_x;
    float m_pose_y;
    float m_pose_z;
    float m_quat_w;
    float m_quat_x;
    float m_quat_y;
    float m_quat_z;
    float m_vel_x;
    float m_vel_y;
    float m_vel_z;
    float m_ang_x;
    float m_ang_y;
    float m_ang_z;
};

#endif // _MAVDATA_H_